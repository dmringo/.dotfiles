(setq lecture-directory "/home/ackley/teaching/S18-554/lectures/")

(define-minor-mode lecture-mode
  "Customization for lecture mode"
  :lighter " lec"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map "\^L" 'recenter-lecture)
            map)
  (if lecture-mode
      (lecture-mode-setup)))

(setq lecture-lines-per-screen 24)
(defun recenter-lecture ()
  (interactive)
  (let* ((curline (1- (line-number-at-pos)))
         (pagetopline (* lecture-lines-per-screen
                         (/ curline lecture-lines-per-screen)))
         (thislineto (- curline pagetopline)))
    (recenter thislineto)))

(defun lecture-mode-setup ()
  (interactive)
  (display-time-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (make-local-variable 'next-screen-context-lines)
  (setq next-screen-context-lines 0)
  (make-local-variable 'truncate-lines)
  (setq truncate-lines t)
  (scroll-bar-mode -1)
  (local-set-key (vector 'home) 'lecture-find-and-show-ps-page)
;;  (local-set-key (vector 'insert) 'lecture-copy-page)
  (local-set-key (vector 'down) 'scroll-up)
  (local-set-key (vector 'up) 'scroll-down)
  (local-set-key (vector 'insert) 'scroll-up)
  (local-set-key (vector 'Scroll_Lock) 'scroll-down)
  (local-set-key (vector 'pause) 'lecture-delete-page)
  (local-set-key (vector 'end) 'lecture-clear-eol)
  (if (display-graphic-p)
      (set-frame-size (selected-frame) 80 26))
  )

(defun lecture-file (file)
  (interactive "fLecture file:")
  (find-file file)
  (lecture-mode))

(defun lecture-newest (&optional directory)
  (interactive)
  (or directory (setq directory lecture-directory))
  (let ((files (directory-files directory))
        (newest 0)
        (date "")
        file)
    (while (setq file (pop files))
      (if (string-match "^\\([0-9]+\\)-slides.txt$" file)
          (let* ((prefix (substring file (match-beginning 1) (match-end 1)))
                 (num (read prefix)))
            (cond
             ((> num newest)
              (setq date prefix)
              (setq newest num))))))
    (if (= newest 0)
        (error "Can't find any lecture files in directory"))
    (setq file (format "%s%s-slides.txt" directory date))
    (let
        ((lines (+ 26 (if tool-bar-mode 3 0))))
      (set-frame-size (selected-frame) 80 lines)
      (lecture-file file))))

(fset 'lecture-clear-eol "d\C-b\C-k\C-n")

(defun lecture-delete-page ()
  (interactive)
  (save-excursion
    (let* ((top (progn (move-to-window-line 0) (point)))
           (bot (progn (scroll-up nil) (move-to-window-line 0) (point))))
      (delete-region top bot))))

(defun lecture-copy-page ()
  (interactive)
  (let ((top (progn (move-to-window-line 0) (point)))
        (bot (progn (scroll-up nil) (move-to-window-line 0) (point))))
    (copy-region-as-kill top bot)
    (yank)
    (move-to-window-line 0)))

(defun lecture-find-and-show-ps-page ()
  (interactive nil)
  (let (start end goto (ext ".ps"))
    (save-excursion
      (setq start (point))
      (forward-line 30)
      (setq end (point))
      (goto-char start)
      (cond
       ((re-search-forward "{\\([0-9]+\\)\\(,\\([^}.]+\\)\\(\\.[^}]*\\)?\\)?}" end t)
        (let ((page (read (buffer-substring
                           (match-beginning 1)
                           (match-end 1))))
              (file nil))
          (if (match-beginning 3)
              (let ((fname (buffer-substring
                            (match-beginning 3)
                            (match-end 3))))
                (if (match-beginning 4)
                    (setq ext (buffer-substring
                               (match-beginning 4)
                               (match-end 4))))
                (setq file (format "%s%s" fname ext))
                (message (format "%d:%s" page file))
                )
            )
          (setq goto (point))
          (cond
           ((equal ext ".ps") (lecture-show-ps-page page file))
           ((equal ext ".pdf") (lecture-show-pdf-page page file))
           (t (lecture-show-html-page page file)))))
       ((re-search-forward "ยง\\([0-9.]+\\)\\(#\\([0-9]+\\)\\)?" end t)
        (let ((section (buffer-substring (match-beginning 1) (match-end 1)))
              (graf ""))
          (if (match-beginning 3)
              (setq graf (buffer-substring (match-beginning 3) (match-end 3))))
          (setq goto (point))
          (lecture-show-spec-page section graf)))
       (t (error "Not found"))))
    (if goto (goto-char goto))))

(defun lecture-show-spec-page (section graf)
  (interactive "N")
  (let ((filename "/home/ackley/teaching/S18-554/doc/ISO-C-FDIS.1999-04.txt")
        (old-point))
    (find-file filename)
    (setq old-point (point))
    (goto-char (point-min))
    (cond
     ((not (re-search-forward (concat "       " section " ") (point-max) t))
      (goto-char old-point)
      (message (concat section " not found")))
     ((equal graf "")  (beginning-of-line))
     ((not (re-search-forward (concat "\\[#" graf "\\]") (point-max) t))
      (message (concat section "[" graf "]" " not found"))))))

(defun lecture-view (file)
  (interactive "fLecture file:")
  (save-excursion
    (let ((buf (current-buffer))
          (lines (+ 26 (if tool-bar-mode 3 0))))
      (find-file file)
      (make-frame `((name . ,(format "%s" file)) (width . 80) (height . ,lines)))
      (lecture-mode)
      (switch-to-buffer buf))))

(provide 'lecture-viewer)
