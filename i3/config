set $mod Mod4

# This font is widely installed, provides lots of unicode glyphs, right-to-leftp
# text rendering and scalability on retina/hidpi displays (thanks to pango).
font pango:Office Code Pro 8

# COLORS  
# class                 border  backgr. text    indicator child_border
client.focused          #2c2099 #6c20c9 #ffffff #2e9ef4   #285577
client.focused_inactive #333333 #5f676a #ffffff #484e50   #5f676a
client.unfocused        #333333 #222222 #888888 #292d2e   #222222
client.urgent           #2f343a #900000 #ffffff #900000   #900000
client.placeholder      #000000 #0c0c0c #ffffff #000000   #0c0c0c
client.background       #ffffff

  
# Minimal borders
# TODO: change this to default_border with a more recent i3
new_window pixel 2
hide_edge_borders vertical
 
# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start preferred term
bindsym $mod+Return exec "gnome-terminal"

# kill focused window
bindsym $mod+q kill
  
# start dmenu (a program launcher)
# bindsym $mod+space exec dmenu_run -i -l 01 -p '>'
# bindsym $mod+space exec i3-dmenu-desktop -dmenu='dmenu -i -l 10 -p ">"'
bindsym $mod+space exec rofi -show combi -combi-modi "drun#run#window" \
  -display-combi    "comb> "  \
  -display-drun     "drun> "  \
  -display-window   "win> "   \
  -display-run      "run> "   \
  -display-keys     "keys> "  \
  -display-windowcd "wincd> " \
  -display-ssh      "ssh> "   \
  

# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right


# move workspace to different output  
bindsym $mod+Control+h move workspace to output left
bindsym $mod+Control+j move workspace to output down
bindsym $mod+Control+k move workspace to output up
bindsym $mod+Control+l move workspace to output right

bindsym $mod+Control+Left move workspace to output left
bindsym $mod+Control+Down move workspace to output down
bindsym $mod+Control+Up move workspace to output up
bindsym $mod+Control+Right move workspace to output right  
  

# split in horizontal orientation
bindsym $mod+z split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle
bindsym $mod+Control+f fullscreen toggle global

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+f floating toggle

# change focus between tiling / floating windows
bindsym $mod+Shift+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
bindsym $mod+Shift+a focus child

# switch to workspace
bindsym $mod+1 workspace 1
bindsym $mod+2 workspace 2
bindsym $mod+3 workspace 3
bindsym $mod+4 workspace 4
bindsym $mod+5 workspace 5
bindsym $mod+6 workspace 6
bindsym $mod+7 workspace 7
bindsym $mod+8 workspace 8
bindsym $mod+9 workspace 9
bindsym $mod+0 workspace 10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace 1
bindsym $mod+Shift+2 move container to workspace 2
bindsym $mod+Shift+3 move container to workspace 3
bindsym $mod+Shift+4 move container to workspace 4
bindsym $mod+Shift+5 move container to workspace 5
bindsym $mod+Shift+6 move container to workspace 6
bindsym $mod+Shift+7 move container to workspace 7
bindsym $mod+Shift+8 move container to workspace 8
bindsym $mod+Shift+9 move container to workspace 9
bindsym $mod+Shift+0 move container to workspace 10

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym h resize shrink width  10 px or 1 ppt
        bindsym j resize grow   height 10 px or 1 ppt
        bindsym k resize shrink height 10 px or 1 ppt
        bindsym l resize grow   width  10 px or 1 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape or mod+r again
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default" 
}

bindsym $mod+r mode "resize"

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
bar {
        wheel_up_cmd nop  
        wheel_down_cmd nop
        status_command i3status
        tray_output primary
}



set $fs-pause exec --no-startup-id i3-fs-pause

# Set shut down, restart and locking features
bindsym $mod+Escape $fs-pause, mode "$mode_system"
# set $mode_system (l)ock, (e)xit, switch_(u)ser, (s)uspend, (h)ibernate, (r)eboot, (Shift+s)hutdown
set $mode_system (l)ock, (e)xit, switch_(u)ser, (s)uspend, (r)eboot, (Shift+s)hutdown, do (n)othing
mode "$mode_system" {
  bindsym l exec       --no-startup-id i3exit lock,        $fs-pause -k, mode "default"
  bindsym e exec       --no-startup-id i3exit logout,      $fs-pause -k, mode "default"
  bindsym u exec       --no-startup-id i3exit switch_user, $fs-pause -k, mode "default"
  bindsym s exec       --no-startup-id i3exit suspend,     $fs-pause -k, mode "default"
#  Hibernate disabled for now.  Need to do some work:
#  https://wiki.archlinux.org/index.php/Power_management/Suspend_and_hibernate
#  bindsym h exec       --no-startup-id i3exit hibernate,   $fs-pause -k, mode "default"
  bindsym r exec       --no-startup-id i3exit reboot,      $fs-pause -k, mode "default"
  bindsym Shift+s exec --no-startup-id i3exit shutdown,    $fs-pause -k, mode "default"  

  # exit system mode: "Enter" or "Escape" or repeat $mod+Esc
  bindsym Return      $fs-pause -k, mode "default"
  bindsym Escape      $fs-pause -k, mode "default"
  bindsym $mod+Escape $fs-pause -k, mode "default"
  bindsym n           $fs-pause -k, mode "default"
}

bindsym $mod+Control+q exec --no-startup-id i3exit lock, $fs-pause -k

# Brightness uses custom script at:
# https://github.com/dmringo/.dotfiles/blob/master/bin/setbacklight  
# bindsym XF86MonBrightnessUp exec setbacklight +5
# bindsym XF86MonBrightnessDown exec setbacklight -5 


# Pulse Audio controls
set     $volCtl exec --no-startup-id amixer -D pulse sset Master

# Should only use these when the kdb doesn't have native XF86 keys, right?
bindsym $mod+F6 $volCtl toggle
bindsym $mod+F7 $volCtl 5%-
bindsym $mod+F8 $volCtl 5%+

bindsym XF86AudioMute        $volCtl toggle
bindsym XF86AudioLowerVolume $volCtl 5%-
bindsym XF86AudioRaiseVolume $volCtl 5%+

# Media player controls
set $mediaPrev exec --no-startup-id playerctl previous  
set $mediaPlay exec --no-startup-id playerctl play-pause
set $mediaNext exec --no-startup-id playerctl next

# Should only use these when the kdb doesn't have native XF86 keys, right?
bindsym $mod+F1 $mediaPrev
bindsym $mod+F2 $mediaPlay
bindsym $mod+F3 $mediaNext

bindsym XF86AudioPrev $mediaPrev
bindsym XF86AudioPlay $mediaPlay
bindsym XF86AudioNext $mediaNext

  
# Brightness uses custom script at:
# https://github.com/dmringo/.dotfiles/blob/master/bin/setbacklight  
# For some reason, on the XPS 9560, the normal XF86 brightness keys repeat
# very slowly.  So those have a coarser step size, whereas these (basically
# the same binding plus the 'Fn' modifier) repeat quickly
bindsym XF86MonBrightnessDown exec setbacklight -10
bindsym XF86MonBrightnessUp   exec setbacklight +10
bindsym $mod+F11 exec setbacklight -1  
bindsym $mod+F12 exec setbacklight +1
bindsym $mod+XF86MonBrightnessDown exec setbacklight -1  
bindsym $mod+XF86MonBrightnessUp exec setbacklight +1

exec_always --no-startup-id feh --bg-fill ~/Pictures/wp/current  

# set a better keyboard repeat delay and rate - 200ms delay before repeat, 100
# repetitions per second. Note: the delay is pretty accurate, I think, but the
# number of repetitions is nowhere near 100.  It's just the value that produces
# a good rate for me
exec_always --no-startup-id xset r rate 200 100

# Make the capslock key an extra control key
# TODO: Should this be a configuration parameter in some file?
exec_always --no-startup-id setxkbmap -option ctrl:nocaps
